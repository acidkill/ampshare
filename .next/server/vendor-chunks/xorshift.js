/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xorshift";
exports.ids = ["vendor-chunks/xorshift"];
exports.modules = {

/***/ "(action-browser)/./node_modules/xorshift/xorshift.js":
/*!*******************************************!*\
  !*** ./node_modules/xorshift/xorshift.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n/**\n * Create a pseudorandom number generator, with a seed.\n * @param {array} seed \"128-bit\" integer, composed of 4x32-bit\n * integers in big endian order.\n */\nfunction XorShift(seed) {\n  // Note the extension, this === module.exports is required because\n  // the `constructor` function will be used to generate new instances.\n  // In that case `this` will point to the default RNG, and `this` will\n  // be an instance of XorShift.\n  if (!(this instanceof XorShift) || this === module.exports) {\n    return new XorShift(seed);\n  }\n\n  if (!Array.isArray(seed) || seed.length !== 4) {\n    throw new TypeError('seed must be an array with 4 numbers');\n  }\n\n  // uint64_t s = [seed ...]\n  this._state0U = seed[0] | 0;\n  this._state0L = seed[1] | 0;\n  this._state1U = seed[2] | 0;\n  this._state1L = seed[3] | 0;\n}\n\n/**\n * Returns a 64bit random number as a 2x32bit array\n * @return {array}\n */\nXorShift.prototype.randomint = function() {\n  // uint64_t s1 = s[0]\n  var s1U = this._state0U, s1L = this._state0L;\n  // uint64_t s0 = s[1]\n  var s0U = this._state1U, s0L = this._state1L;\n\n  // result = s0 + s1\n  var sumL = (s0L >>> 0) + (s1L >>> 0);\n  var resU = (s0U + s1U + (sumL / 2 >>> 31)) >>> 0;\n  var resL = sumL >>> 0;\n\n  // s[0] = s0\n  this._state0U = s0U;\n  this._state0L = s0L;\n\n  // - t1 = [0, 0]\n  var t1U = 0, t1L = 0;\n  // - t2 = [0, 0]\n  var t2U = 0, t2L = 0;\n\n  // s1 ^= s1 << 23;\n  // :: t1 = s1 << 23\n  var a1 = 23;\n  var m1 = 0xFFFFFFFF << (32 - a1);\n  t1U = (s1U << a1) | ((s1L & m1) >>> (32 - a1));\n  t1L = s1L << a1;\n  // :: s1 = s1 ^ t1\n  s1U = s1U ^ t1U;\n  s1L = s1L ^ t1L;\n\n  // t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )\n  // :: t1 = s1 ^ s0\n  t1U = s1U ^ s0U;\n  t1L = s1L ^ s0L;\n  // :: t2 = s1 >> 18\n  var a2 = 18;\n  var m2 = 0xFFFFFFFF >>> (32 - a2);\n  t2U = s1U >>> a2;\n  t2L = (s1L >>> a2) | ((s1U & m2) << (32 - a2));\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n  // :: t2 = s0 >> 5\n  var a3 = 5;\n  var m3 = 0xFFFFFFFF >>> (32 - a3);\n  t2U = s0U >>> a3;\n  t2L = (s0L >>> a3) | ((s0U & m3) << (32 - a3));\n  // :: t1 = t1 ^ t2\n  t1U = t1U ^ t2U;\n  t1L = t1L ^ t2L;\n\n  // s[1] = t1\n  this._state1U = t1U;\n  this._state1L = t1L;\n\n  // return result\n  return [resU, resL];\n};\n\n/**\n * Returns a random number normalized [0, 1), just like Math.random()\n * @return {number}\n */\nXorShift.prototype.random = function() {\n  var t2 = this.randomint();\n  // Math.pow(2, -32) = 2.3283064365386963e-10\n  // Math.pow(2, -52) = 2.220446049250313e-16\n  return t2[0] * 2.3283064365386963e-10 + (t2[1] >>> 12) * 2.220446049250313e-16;\n};\n\n// Seed with Math.random() by default to prevent seed collision\nfunction getRandomSeed() {\n    return Math.random() * Math.pow(2, 32);\n}\nmodule.exports = new XorShift([\n  getRandomSeed(),\n  getRandomSeed(),\n  getRandomSeed(),\n  getRandomSeed()\n]);\n\n// Export constructor under its own name so that consumers using ES2015\n// can write `import { XorShift } from 'xorshift'`.\nmodule.exports.XorShift = XorShift;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94b3JzaGlmdC94b3JzaGlmdC5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIsV0FBVztBQUNsQyx1QkFBdUIiLCJzb3VyY2VzIjpbIi9ob21lL3Byb2plY3Qvbm9kZV9tb2R1bGVzL3hvcnNoaWZ0L3hvcnNoaWZ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBDcmVhdGUgYSBwc2V1ZG9yYW5kb20gbnVtYmVyIGdlbmVyYXRvciwgd2l0aCBhIHNlZWQuXG4gKiBAcGFyYW0ge2FycmF5fSBzZWVkIFwiMTI4LWJpdFwiIGludGVnZXIsIGNvbXBvc2VkIG9mIDR4MzItYml0XG4gKiBpbnRlZ2VycyBpbiBiaWcgZW5kaWFuIG9yZGVyLlxuICovXG5mdW5jdGlvbiBYb3JTaGlmdChzZWVkKSB7XG4gIC8vIE5vdGUgdGhlIGV4dGVuc2lvbiwgdGhpcyA9PT0gbW9kdWxlLmV4cG9ydHMgaXMgcmVxdWlyZWQgYmVjYXVzZVxuICAvLyB0aGUgYGNvbnN0cnVjdG9yYCBmdW5jdGlvbiB3aWxsIGJlIHVzZWQgdG8gZ2VuZXJhdGUgbmV3IGluc3RhbmNlcy5cbiAgLy8gSW4gdGhhdCBjYXNlIGB0aGlzYCB3aWxsIHBvaW50IHRvIHRoZSBkZWZhdWx0IFJORywgYW5kIGB0aGlzYCB3aWxsXG4gIC8vIGJlIGFuIGluc3RhbmNlIG9mIFhvclNoaWZ0LlxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgWG9yU2hpZnQpIHx8IHRoaXMgPT09IG1vZHVsZS5leHBvcnRzKSB7XG4gICAgcmV0dXJuIG5ldyBYb3JTaGlmdChzZWVkKTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShzZWVkKSB8fCBzZWVkLmxlbmd0aCAhPT0gNCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NlZWQgbXVzdCBiZSBhbiBhcnJheSB3aXRoIDQgbnVtYmVycycpO1xuICB9XG5cbiAgLy8gdWludDY0X3QgcyA9IFtzZWVkIC4uLl1cbiAgdGhpcy5fc3RhdGUwVSA9IHNlZWRbMF0gfCAwO1xuICB0aGlzLl9zdGF0ZTBMID0gc2VlZFsxXSB8IDA7XG4gIHRoaXMuX3N0YXRlMVUgPSBzZWVkWzJdIHwgMDtcbiAgdGhpcy5fc3RhdGUxTCA9IHNlZWRbM10gfCAwO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSA2NGJpdCByYW5kb20gbnVtYmVyIGFzIGEgMngzMmJpdCBhcnJheVxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cblhvclNoaWZ0LnByb3RvdHlwZS5yYW5kb21pbnQgPSBmdW5jdGlvbigpIHtcbiAgLy8gdWludDY0X3QgczEgPSBzWzBdXG4gIHZhciBzMVUgPSB0aGlzLl9zdGF0ZTBVLCBzMUwgPSB0aGlzLl9zdGF0ZTBMO1xuICAvLyB1aW50NjRfdCBzMCA9IHNbMV1cbiAgdmFyIHMwVSA9IHRoaXMuX3N0YXRlMVUsIHMwTCA9IHRoaXMuX3N0YXRlMUw7XG5cbiAgLy8gcmVzdWx0ID0gczAgKyBzMVxuICB2YXIgc3VtTCA9IChzMEwgPj4+IDApICsgKHMxTCA+Pj4gMCk7XG4gIHZhciByZXNVID0gKHMwVSArIHMxVSArIChzdW1MIC8gMiA+Pj4gMzEpKSA+Pj4gMDtcbiAgdmFyIHJlc0wgPSBzdW1MID4+PiAwO1xuXG4gIC8vIHNbMF0gPSBzMFxuICB0aGlzLl9zdGF0ZTBVID0gczBVO1xuICB0aGlzLl9zdGF0ZTBMID0gczBMO1xuXG4gIC8vIC0gdDEgPSBbMCwgMF1cbiAgdmFyIHQxVSA9IDAsIHQxTCA9IDA7XG4gIC8vIC0gdDIgPSBbMCwgMF1cbiAgdmFyIHQyVSA9IDAsIHQyTCA9IDA7XG5cbiAgLy8gczEgXj0gczEgPDwgMjM7XG4gIC8vIDo6IHQxID0gczEgPDwgMjNcbiAgdmFyIGExID0gMjM7XG4gIHZhciBtMSA9IDB4RkZGRkZGRkYgPDwgKDMyIC0gYTEpO1xuICB0MVUgPSAoczFVIDw8IGExKSB8ICgoczFMICYgbTEpID4+PiAoMzIgLSBhMSkpO1xuICB0MUwgPSBzMUwgPDwgYTE7XG4gIC8vIDo6IHMxID0gczEgXiB0MVxuICBzMVUgPSBzMVUgXiB0MVU7XG4gIHMxTCA9IHMxTCBeIHQxTDtcblxuICAvLyB0MSA9ICggczEgXiBzMCBeICggczEgPj4gMTcgKSBeICggczAgPj4gMjYgKSApXG4gIC8vIDo6IHQxID0gczEgXiBzMFxuICB0MVUgPSBzMVUgXiBzMFU7XG4gIHQxTCA9IHMxTCBeIHMwTDtcbiAgLy8gOjogdDIgPSBzMSA+PiAxOFxuICB2YXIgYTIgPSAxODtcbiAgdmFyIG0yID0gMHhGRkZGRkZGRiA+Pj4gKDMyIC0gYTIpO1xuICB0MlUgPSBzMVUgPj4+IGEyO1xuICB0MkwgPSAoczFMID4+PiBhMikgfCAoKHMxVSAmIG0yKSA8PCAoMzIgLSBhMikpO1xuICAvLyA6OiB0MSA9IHQxIF4gdDJcbiAgdDFVID0gdDFVIF4gdDJVO1xuICB0MUwgPSB0MUwgXiB0Mkw7XG4gIC8vIDo6IHQyID0gczAgPj4gNVxuICB2YXIgYTMgPSA1O1xuICB2YXIgbTMgPSAweEZGRkZGRkZGID4+PiAoMzIgLSBhMyk7XG4gIHQyVSA9IHMwVSA+Pj4gYTM7XG4gIHQyTCA9IChzMEwgPj4+IGEzKSB8ICgoczBVICYgbTMpIDw8ICgzMiAtIGEzKSk7XG4gIC8vIDo6IHQxID0gdDEgXiB0MlxuICB0MVUgPSB0MVUgXiB0MlU7XG4gIHQxTCA9IHQxTCBeIHQyTDtcblxuICAvLyBzWzFdID0gdDFcbiAgdGhpcy5fc3RhdGUxVSA9IHQxVTtcbiAgdGhpcy5fc3RhdGUxTCA9IHQxTDtcblxuICAvLyByZXR1cm4gcmVzdWx0XG4gIHJldHVybiBbcmVzVSwgcmVzTF07XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gbnVtYmVyIG5vcm1hbGl6ZWQgWzAsIDEpLCBqdXN0IGxpa2UgTWF0aC5yYW5kb20oKVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5Yb3JTaGlmdC5wcm90b3R5cGUucmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0MiA9IHRoaXMucmFuZG9taW50KCk7XG4gIC8vIE1hdGgucG93KDIsIC0zMikgPSAyLjMyODMwNjQzNjUzODY5NjNlLTEwXG4gIC8vIE1hdGgucG93KDIsIC01MikgPSAyLjIyMDQ0NjA0OTI1MDMxM2UtMTZcbiAgcmV0dXJuIHQyWzBdICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMCArICh0MlsxXSA+Pj4gMTIpICogMi4yMjA0NDYwNDkyNTAzMTNlLTE2O1xufTtcblxuLy8gU2VlZCB3aXRoIE1hdGgucmFuZG9tKCkgYnkgZGVmYXVsdCB0byBwcmV2ZW50IHNlZWQgY29sbGlzaW9uXG5mdW5jdGlvbiBnZXRSYW5kb21TZWVkKCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgMzIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBuZXcgWG9yU2hpZnQoW1xuICBnZXRSYW5kb21TZWVkKCksXG4gIGdldFJhbmRvbVNlZWQoKSxcbiAgZ2V0UmFuZG9tU2VlZCgpLFxuICBnZXRSYW5kb21TZWVkKClcbl0pO1xuXG4vLyBFeHBvcnQgY29uc3RydWN0b3IgdW5kZXIgaXRzIG93biBuYW1lIHNvIHRoYXQgY29uc3VtZXJzIHVzaW5nIEVTMjAxNVxuLy8gY2FuIHdyaXRlIGBpbXBvcnQgeyBYb3JTaGlmdCB9IGZyb20gJ3hvcnNoaWZ0J2AuXG5tb2R1bGUuZXhwb3J0cy5Yb3JTaGlmdCA9IFhvclNoaWZ0O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xorshift/xorshift.js\n");

/***/ })

};
;