# Task ID: 1
# Title: Implement Web Component Registration Singleton
# Status: done
# Dependencies: None
# Priority: high
# Description: Create a singleton pattern for web component registration to prevent duplicate component registration errors.
# Details:
Create a registry.ts file in the web-components directory that implements a singleton pattern for web component registration. The implementation should:

1. Maintain a Set of registered component names
2. Provide a registerWebComponent function that checks if a component is already registered before defining it
3. Prevent duplicate registrations by checking both customElements.get() and the internal Set

Implementation should follow the pattern provided in the PRD:

```typescript
// web-components/registry.ts
const registeredComponents = new Set<string>();

export function registerWebComponent(name: string, constructor: CustomElementConstructor) {
  if (!customElements.get(name) && !registeredComponents.has(name)) {
    customElements.define(name, constructor);
    registeredComponents.add(name);
  }
}
```

# Test Strategy:
Write unit tests to verify:
1. Components are registered successfully on first attempt
2. Duplicate registrations are prevented
3. The Set correctly tracks registered components
4. The function works with various component types
